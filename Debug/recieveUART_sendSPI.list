
recieveUART_sendSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006f4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000888  08000888  00001888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080008bc  080008bc  000018c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080008bc  080008bc  000018c4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080008bc  080008c4  000018c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008bc  080008bc  000018bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080008c0  080008c0  000018c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000018c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000000  080008c4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080008c4  000020a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000770  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000040c  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00002470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000c6  00000000  00000000  00002590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000132b  00000000  00000000  00002656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001516  00000000  00000000  00003981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004923  00000000  00000000  00004e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000097ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000308  00000000  00000000  00009800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00009b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000870 	.word	0x08000870

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000870 	.word	0x08000870

080001d4 <delay_ms>:

#include "stm32f401.h"
#include "spi.h"
#include "can.h"

void delay_ms(volatile uint32_t ms) {
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
    // Approximate cycles per ms for 16 MHz = 16,000 cycles/ms
    // Each iteration of the inner loop takes roughly 4 CPU cycles (NOP + loop overhead)
    // So number of iterations for 1 ms = 16000 / 4 = 4000

    for (volatile uint32_t i = 0; i < ms; i++) {
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e00d      	b.n	80001fe <delay_ms+0x2a>
        for (volatile uint32_t j = 0; j < 4000; j++) {
 80001e2:	2300      	movs	r3, #0
 80001e4:	60bb      	str	r3, [r7, #8]
 80001e6:	e003      	b.n	80001f0 <delay_ms+0x1c>
            __asm__("nop");
 80001e8:	bf00      	nop
        for (volatile uint32_t j = 0; j < 4000; j++) {
 80001ea:	68bb      	ldr	r3, [r7, #8]
 80001ec:	3301      	adds	r3, #1
 80001ee:	60bb      	str	r3, [r7, #8]
 80001f0:	68bb      	ldr	r3, [r7, #8]
 80001f2:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80001f6:	d3f7      	bcc.n	80001e8 <delay_ms+0x14>
    for (volatile uint32_t i = 0; i < ms; i++) {
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	3301      	adds	r3, #1
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fa      	ldr	r2, [r7, #12]
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	429a      	cmp	r2, r3
 8000204:	d3ed      	bcc.n	80001e2 <delay_ms+0xe>
        }
    }
}
 8000206:	bf00      	nop
 8000208:	bf00      	nop
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <cs_low>:

void cs_low(void) {
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
    GPIOA_BSRR = (1 << (CS_PIN + 16));
 8000218:	4b04      	ldr	r3, [pc, #16]	@ (800022c <cs_low+0x18>)
 800021a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800021e:	601a      	str	r2, [r3, #0]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40020018 	.word	0x40020018

08000230 <cs_high>:

void cs_high(void) {
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
    GPIOA_BSRR = (1 << CS_PIN);
 8000234:	4b03      	ldr	r3, [pc, #12]	@ (8000244 <cs_high+0x14>)
 8000236:	2210      	movs	r2, #16
 8000238:	601a      	str	r2, [r3, #0]
}
 800023a:	bf00      	nop
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr
 8000244:	40020018 	.word	0x40020018

08000248 <mcp2515_write_register>:

void mcp2515_write_register(uint8_t reg, uint8_t val) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	460a      	mov	r2, r1
 8000252:	71fb      	strb	r3, [r7, #7]
 8000254:	4613      	mov	r3, r2
 8000256:	71bb      	strb	r3, [r7, #6]
    cs_low();
 8000258:	f7ff ffdc 	bl	8000214 <cs_low>
    spi1_transfer(MCP2515_WRITE);
 800025c:	2002      	movs	r0, #2
 800025e:	f000 f963 	bl	8000528 <spi1_transfer>
    spi1_transfer(reg);
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f95f 	bl	8000528 <spi1_transfer>
    spi1_transfer(val);
 800026a:	79bb      	ldrb	r3, [r7, #6]
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f95b 	bl	8000528 <spi1_transfer>
    cs_high();
 8000272:	f7ff ffdd 	bl	8000230 <cs_high>
}
 8000276:	bf00      	nop
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <mcp2515_read_register>:

uint8_t mcp2515_read_register(uint8_t reg) {
 800027e:	b580      	push	{r7, lr}
 8000280:	b084      	sub	sp, #16
 8000282:	af00      	add	r7, sp, #0
 8000284:	4603      	mov	r3, r0
 8000286:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    cs_low();
 8000288:	f7ff ffc4 	bl	8000214 <cs_low>
    spi1_transfer(MCP2515_READ);
 800028c:	2003      	movs	r0, #3
 800028e:	f000 f94b 	bl	8000528 <spi1_transfer>
    spi1_transfer(reg);
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f947 	bl	8000528 <spi1_transfer>
    val = spi1_transfer(0xFF);
 800029a:	20ff      	movs	r0, #255	@ 0xff
 800029c:	f000 f944 	bl	8000528 <spi1_transfer>
 80002a0:	4603      	mov	r3, r0
 80002a2:	73fb      	strb	r3, [r7, #15]
    cs_high();
 80002a4:	f7ff ffc4 	bl	8000230 <cs_high>
    return val;
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	3710      	adds	r7, #16
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <mcp2515_reset>:

static void mcp2515_reset(void) {
 80002b2:	b580      	push	{r7, lr}
 80002b4:	af00      	add	r7, sp, #0
    cs_low();
 80002b6:	f7ff ffad 	bl	8000214 <cs_low>
    spi1_transfer(MCP2515_RESET);
 80002ba:	20c0      	movs	r0, #192	@ 0xc0
 80002bc:	f000 f934 	bl	8000528 <spi1_transfer>
    cs_high();
 80002c0:	f7ff ffb6 	bl	8000230 <cs_high>
    delay_ms(10);
 80002c4:	200a      	movs	r0, #10
 80002c6:	f7ff ff85 	bl	80001d4 <delay_ms>
}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <can_init>:

void can_init(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
    // Enable GPIOA clock
    RCC_AHB1ENR |= (1 << 0);
 80002d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000348 <can_init+0x78>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000348 <can_init+0x78>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6013      	str	r3, [r2, #0]

    // Configure CS_PIN as output
    GPIOA_MODER &= ~(0x3 << (CS_PIN * 2));
 80002e0:	4b1a      	ldr	r3, [pc, #104]	@ (800034c <can_init+0x7c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a19      	ldr	r2, [pc, #100]	@ (800034c <can_init+0x7c>)
 80002e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80002ea:	6013      	str	r3, [r2, #0]
    GPIOA_MODER |=  (0x1 << (CS_PIN * 2));  // Output mode
 80002ec:	4b17      	ldr	r3, [pc, #92]	@ (800034c <can_init+0x7c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a16      	ldr	r2, [pc, #88]	@ (800034c <can_init+0x7c>)
 80002f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002f6:	6013      	str	r3, [r2, #0]
    cs_high();
 80002f8:	f7ff ff9a 	bl	8000230 <cs_high>

    // Reset MCP2515 chip
    mcp2515_reset();
 80002fc:	f7ff ffd9 	bl	80002b2 <mcp2515_reset>

    // Enter configuration mode
    mcp2515_write_register(MCP2515_CANCTRL, 0x80);
 8000300:	2180      	movs	r1, #128	@ 0x80
 8000302:	200f      	movs	r0, #15
 8000304:	f7ff ffa0 	bl	8000248 <mcp2515_write_register>
    delay_ms(10);
 8000308:	200a      	movs	r0, #10
 800030a:	f7ff ff63 	bl	80001d4 <delay_ms>

    // Set bit timing for 500 kbps (adjust for your clock)
    mcp2515_write_register(MCP2515_CNF1, 0x00);
 800030e:	2100      	movs	r1, #0
 8000310:	202a      	movs	r0, #42	@ 0x2a
 8000312:	f7ff ff99 	bl	8000248 <mcp2515_write_register>
    mcp2515_write_register(MCP2515_CNF2, 0x90);
 8000316:	2190      	movs	r1, #144	@ 0x90
 8000318:	2029      	movs	r0, #41	@ 0x29
 800031a:	f7ff ff95 	bl	8000248 <mcp2515_write_register>
    mcp2515_write_register(MCP2515_CNF3, 0x02);
 800031e:	2102      	movs	r1, #2
 8000320:	2028      	movs	r0, #40	@ 0x28
 8000322:	f7ff ff91 	bl	8000248 <mcp2515_write_register>

    // Accept all messages
    mcp2515_write_register(MCP2515_RXB0CTRL, 0x00);
 8000326:	2100      	movs	r1, #0
 8000328:	2060      	movs	r0, #96	@ 0x60
 800032a:	f7ff ff8d 	bl	8000248 <mcp2515_write_register>
    mcp2515_write_register(MCP2515_RXB1CTRL, 0x00);
 800032e:	2100      	movs	r1, #0
 8000330:	2070      	movs	r0, #112	@ 0x70
 8000332:	f7ff ff89 	bl	8000248 <mcp2515_write_register>

    // Switch to normal mode
    mcp2515_write_register(MCP2515_CANCTRL, 0x00);
 8000336:	2100      	movs	r1, #0
 8000338:	200f      	movs	r0, #15
 800033a:	f7ff ff85 	bl	8000248 <mcp2515_write_register>
    //mcp2515_write_register(MCP2515_CANCTRL, 0x40); // 0x40 = Loopback mode
    delay_ms(10);
 800033e:	200a      	movs	r0, #10
 8000340:	f7ff ff48 	bl	80001d4 <delay_ms>
}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40023830 	.word	0x40023830
 800034c:	40020000 	.word	0x40020000

08000350 <can_send_uint32>:

bool can_send_uint32(uint32_t value) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
    // Check if TX buffer is free (TXREQ should be 0)
    uint8_t txb0ctrl = mcp2515_read_register(MCP2515_TXB0CTRL);
 8000358:	2030      	movs	r0, #48	@ 0x30
 800035a:	f7ff ff90 	bl	800027e <mcp2515_read_register>
 800035e:	4603      	mov	r3, r0
 8000360:	73fb      	strb	r3, [r7, #15]
    if (txb0ctrl & 0x08) { // TXREQ bit
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	f003 0308 	and.w	r3, r3, #8
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <can_send_uint32+0x20>
        return false; // Transmission buffer is busy
 800036c:	2300      	movs	r3, #0
 800036e:	e037      	b.n	80003e0 <can_send_uint32+0x90>
    }

    cs_low();
 8000370:	f7ff ff50 	bl	8000214 <cs_low>
    spi1_transfer(MCP2515_WRITE);
 8000374:	2002      	movs	r0, #2
 8000376:	f000 f8d7 	bl	8000528 <spi1_transfer>
    spi1_transfer(MCP2515_TXB0SIDH);
 800037a:	2031      	movs	r0, #49	@ 0x31
 800037c:	f000 f8d4 	bl	8000528 <spi1_transfer>
    spi1_transfer(0x00); // SIDH
 8000380:	2000      	movs	r0, #0
 8000382:	f000 f8d1 	bl	8000528 <spi1_transfer>
    spi1_transfer(0x00); // SIDL
 8000386:	2000      	movs	r0, #0
 8000388:	f000 f8ce 	bl	8000528 <spi1_transfer>
    spi1_transfer(0x00); // EID8
 800038c:	2000      	movs	r0, #0
 800038e:	f000 f8cb 	bl	8000528 <spi1_transfer>
    spi1_transfer(0x00); // EID0
 8000392:	2000      	movs	r0, #0
 8000394:	f000 f8c8 	bl	8000528 <spi1_transfer>
    spi1_transfer(0x04); // DLC = 4
 8000398:	2004      	movs	r0, #4
 800039a:	f000 f8c5 	bl	8000528 <spi1_transfer>
    spi1_transfer((value >> 24) & 0xFF);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	0e1b      	lsrs	r3, r3, #24
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 f8bf 	bl	8000528 <spi1_transfer>
    spi1_transfer((value >> 16) & 0xFF);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	0c1b      	lsrs	r3, r3, #16
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 f8b9 	bl	8000528 <spi1_transfer>
    spi1_transfer((value >> 8) & 0xFF);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	0a1b      	lsrs	r3, r3, #8
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 f8b3 	bl	8000528 <spi1_transfer>
    spi1_transfer(value & 0xFF);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 f8ae 	bl	8000528 <spi1_transfer>
    cs_high();
 80003cc:	f7ff ff30 	bl	8000230 <cs_high>

    cs_low();
 80003d0:	f7ff ff20 	bl	8000214 <cs_low>
    spi1_transfer(MCP2515_RTS_TXB0);
 80003d4:	2081      	movs	r0, #129	@ 0x81
 80003d6:	f000 f8a7 	bl	8000528 <spi1_transfer>
    cs_high();
 80003da:	f7ff ff29 	bl	8000230 <cs_high>

    return true;
 80003de:	2301      	movs	r3, #1
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	3710      	adds	r7, #16
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <main>:
#include "stm32f401.h"
#include "uart.h"
#include "can.h"
#include "spi.h"

int main(void) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
	spi1_init();
 80003ee:	f000 f843 	bl	8000478 <spi1_init>
    uart_init();
 80003f2:	f000 f8c5 	bl	8000580 <uart_init>
    can_init();
 80003f6:	f7ff ff6b 	bl	80002d0 <can_init>

    uint8_t rx_index = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	73fb      	strb	r3, [r7, #15]
    uint8_t rx_buffer[4];  // Buffer to accumulate 4 bytes
    char byte;

    uart_send_async_string(" System Initialized \r\n");
 80003fe:	481b      	ldr	r0, [pc, #108]	@ (800046c <main+0x84>)
 8000400:	f000 f97a 	bl	80006f8 <uart_send_async_string>

    while (1) {
        if (uart_read_byte(&byte)) {
 8000404:	1cfb      	adds	r3, r7, #3
 8000406:	4618      	mov	r0, r3
 8000408:	f000 f958 	bl	80006bc <uart_read_byte>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d0f8      	beq.n	8000404 <main+0x1c>
            rx_buffer[rx_index++] = byte;
 8000412:	7bfb      	ldrb	r3, [r7, #15]
 8000414:	1c5a      	adds	r2, r3, #1
 8000416:	73fa      	strb	r2, [r7, #15]
 8000418:	78fa      	ldrb	r2, [r7, #3]
 800041a:	3310      	adds	r3, #16
 800041c:	443b      	add	r3, r7
 800041e:	f803 2c0c 	strb.w	r2, [r3, #-12]

            if (rx_index == 4) {
 8000422:	7bfb      	ldrb	r3, [r7, #15]
 8000424:	2b04      	cmp	r3, #4
 8000426:	d1ed      	bne.n	8000404 <main+0x1c>
                // Convert to uint32_t
                uint32_t value = (rx_buffer[0] << 24) |
 8000428:	793b      	ldrb	r3, [r7, #4]
 800042a:	061a      	lsls	r2, r3, #24
                                 (rx_buffer[1] << 16) |
 800042c:	797b      	ldrb	r3, [r7, #5]
 800042e:	041b      	lsls	r3, r3, #16
                uint32_t value = (rx_buffer[0] << 24) |
 8000430:	431a      	orrs	r2, r3
                                 (rx_buffer[2] << 8) |
 8000432:	79bb      	ldrb	r3, [r7, #6]
 8000434:	021b      	lsls	r3, r3, #8
                                 (rx_buffer[1] << 16) |
 8000436:	4313      	orrs	r3, r2
                                 (rx_buffer[3]);
 8000438:	79fa      	ldrb	r2, [r7, #7]
                                 (rx_buffer[2] << 8) |
 800043a:	4313      	orrs	r3, r2
                uint32_t value = (rx_buffer[0] << 24) |
 800043c:	60bb      	str	r3, [r7, #8]

                if (can_send_uint32(value)) {
 800043e:	68b8      	ldr	r0, [r7, #8]
 8000440:	f7ff ff86 	bl	8000350 <can_send_uint32>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d009      	beq.n	800045e <main+0x76>
                    uart_send_async_string("Sent: ");
 800044a:	4809      	ldr	r0, [pc, #36]	@ (8000470 <main+0x88>)
 800044c:	f000 f954 	bl	80006f8 <uart_send_async_string>
                    uart_send_hex(value);
 8000450:	68b8      	ldr	r0, [r7, #8]
 8000452:	f000 f913 	bl	800067c <uart_send_hex>
                    uart_send_async('\n');
 8000456:	200a      	movs	r0, #10
 8000458:	f000 f8da 	bl	8000610 <uart_send_async>
 800045c:	e002      	b.n	8000464 <main+0x7c>
                } else {
                    uart_send_async_string("CAN Send Failed\r\n");
 800045e:	4805      	ldr	r0, [pc, #20]	@ (8000474 <main+0x8c>)
 8000460:	f000 f94a 	bl	80006f8 <uart_send_async_string>
                }

                rx_index = 0;  // Reset buffer
 8000464:	2300      	movs	r3, #0
 8000466:	73fb      	strb	r3, [r7, #15]
        if (uart_read_byte(&byte)) {
 8000468:	e7cc      	b.n	8000404 <main+0x1c>
 800046a:	bf00      	nop
 800046c:	08000888 	.word	0x08000888
 8000470:	080008a0 	.word	0x080008a0
 8000474:	080008a8 	.word	0x080008a8

08000478 <spi1_init>:
 */

#include "stm32f401.h"
#include "spi.h"

void spi1_init(void) {
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
    RCC_AHB1ENR |= (1 << 0);     // GPIOA
 800047c:	4b25      	ldr	r3, [pc, #148]	@ (8000514 <spi1_init+0x9c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a24      	ldr	r2, [pc, #144]	@ (8000514 <spi1_init+0x9c>)
 8000482:	f043 0301 	orr.w	r3, r3, #1
 8000486:	6013      	str	r3, [r2, #0]
    RCC_APB2ENR |= (1 << 12);    // SPI1
 8000488:	4b23      	ldr	r3, [pc, #140]	@ (8000518 <spi1_init+0xa0>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a22      	ldr	r2, [pc, #136]	@ (8000518 <spi1_init+0xa0>)
 800048e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000492:	6013      	str	r3, [r2, #0]

    // PA5 = SCK, PA6 = MISO, PA7 = MOSI
    // Clear PA5, PA6, PA7 (each pin is 2 bits in MODER)
    GPIOA_MODER &= ~((3 << (5 * 2)) | (3 << (6 * 2)) | (3 << (7 * 2)));
 8000494:	4b21      	ldr	r3, [pc, #132]	@ (800051c <spi1_init+0xa4>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a20      	ldr	r2, [pc, #128]	@ (800051c <spi1_init+0xa4>)
 800049a:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 800049e:	6013      	str	r3, [r2, #0]
    // Set to Alternate Function mode (10)
    GPIOA_MODER |=  ((2 << (5 * 2)) | (2 << (6 * 2)) | (2 << (7 * 2)));
 80004a0:	4b1e      	ldr	r3, [pc, #120]	@ (800051c <spi1_init+0xa4>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a1d      	ldr	r2, [pc, #116]	@ (800051c <spi1_init+0xa4>)
 80004a6:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 80004aa:	6013      	str	r3, [r2, #0]


    GPIOA_AFRL &= ~((0xF << (4 * 5)) | (0xF << (4 * 6)) | (0xF << (4 * 7)));
 80004ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000520 <spi1_init+0xa8>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000520 <spi1_init+0xa8>)
 80004b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80004b6:	6013      	str	r3, [r2, #0]
    GPIOA_AFRL |=  ((5 << (4 * 5)) | (5 << (4 * 6)) | (5 << (4 * 7)));  // AF5
 80004b8:	4b19      	ldr	r3, [pc, #100]	@ (8000520 <spi1_init+0xa8>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a18      	ldr	r2, [pc, #96]	@ (8000520 <spi1_init+0xa8>)
 80004be:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80004c2:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80004c6:	6013      	str	r3, [r2, #0]

    SPI1_CR1 = 0;                     // Reset
 80004c8:	4b16      	ldr	r3, [pc, #88]	@ (8000524 <spi1_init+0xac>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
    SPI1_CR1 |= (1 << 2);             // Master
 80004ce:	4b15      	ldr	r3, [pc, #84]	@ (8000524 <spi1_init+0xac>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a14      	ldr	r2, [pc, #80]	@ (8000524 <spi1_init+0xac>)
 80004d4:	f043 0304 	orr.w	r3, r3, #4
 80004d8:	6013      	str	r3, [r2, #0]
    SPI1_CR1 &= ~((1 << 1) | (1 << 0));  // ✅ Mode 0
 80004da:	4b12      	ldr	r3, [pc, #72]	@ (8000524 <spi1_init+0xac>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a11      	ldr	r2, [pc, #68]	@ (8000524 <spi1_init+0xac>)
 80004e0:	f023 0303 	bic.w	r3, r3, #3
 80004e4:	6013      	str	r3, [r2, #0]
    SPI1_CR1 |= (3 << 3);             // Baud rate = fPCLK/16
 80004e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000524 <spi1_init+0xac>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000524 <spi1_init+0xac>)
 80004ec:	f043 0318 	orr.w	r3, r3, #24
 80004f0:	6013      	str	r3, [r2, #0]
    SPI1_CR1 |= (1 << 9) | (1 << 8);  // SSM=1, SSI=1 (manual NSS)
 80004f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <spi1_init+0xac>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000524 <spi1_init+0xac>)
 80004f8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80004fc:	6013      	str	r3, [r2, #0]
    SPI1_CR1 |= (1 << 6);             // SPI enable
 80004fe:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <spi1_init+0xac>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a08      	ldr	r2, [pc, #32]	@ (8000524 <spi1_init+0xac>)
 8000504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000508:	6013      	str	r3, [r2, #0]
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	40023830 	.word	0x40023830
 8000518:	40023844 	.word	0x40023844
 800051c:	40020000 	.word	0x40020000
 8000520:	40020020 	.word	0x40020020
 8000524:	40013000 	.word	0x40013000

08000528 <spi1_transfer>:

uint8_t spi1_transfer(uint8_t data) {
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
    while (!(SPI1_SR & (1 << 1)));  // Wait until TXE
 8000532:	bf00      	nop
 8000534:	4b10      	ldr	r3, [pc, #64]	@ (8000578 <spi1_transfer+0x50>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f003 0302 	and.w	r3, r3, #2
 800053c:	2b00      	cmp	r3, #0
 800053e:	d0f9      	beq.n	8000534 <spi1_transfer+0xc>
    SPI1_DR = data;
 8000540:	4a0e      	ldr	r2, [pc, #56]	@ (800057c <spi1_transfer+0x54>)
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	6013      	str	r3, [r2, #0]
    while (!(SPI1_SR & (1 << 0)));  // Wait until RXNE
 8000546:	bf00      	nop
 8000548:	4b0b      	ldr	r3, [pc, #44]	@ (8000578 <spi1_transfer+0x50>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f003 0301 	and.w	r3, r3, #1
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0f9      	beq.n	8000548 <spi1_transfer+0x20>
    uint8_t received = SPI1_DR;
 8000554:	4b09      	ldr	r3, [pc, #36]	@ (800057c <spi1_transfer+0x54>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	73fb      	strb	r3, [r7, #15]
    while (SPI1_SR & (1 << 7));     // Wait until BSY cleared
 800055a:	bf00      	nop
 800055c:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <spi1_transfer+0x50>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000564:	2b00      	cmp	r3, #0
 8000566:	d1f9      	bne.n	800055c <spi1_transfer+0x34>
    return received;
 8000568:	7bfb      	ldrb	r3, [r7, #15]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40013008 	.word	0x40013008
 800057c:	4001300c 	.word	0x4001300c

08000580 <uart_init>:

// Last received byte (simple read model)
volatile char uart_last_byte = 0;
volatile uint8_t uart_data_available = 0;

void uart_init(void) {
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
    // Enable GPIOA clock
    RCC_AHB1ENR |= (1 << 0);
 8000584:	4b1b      	ldr	r3, [pc, #108]	@ (80005f4 <uart_init+0x74>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a1a      	ldr	r2, [pc, #104]	@ (80005f4 <uart_init+0x74>)
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	6013      	str	r3, [r2, #0]

    // PA9 (TX), PA10 (RX) to AF7 (USART1)
    GPIOA_MODER &= ~((0x3 << (9 * 2)) | (0x3 << (10 * 2)));
 8000590:	4b19      	ldr	r3, [pc, #100]	@ (80005f8 <uart_init+0x78>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a18      	ldr	r2, [pc, #96]	@ (80005f8 <uart_init+0x78>)
 8000596:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 800059a:	6013      	str	r3, [r2, #0]
    GPIOA_MODER |=  ((0x2 << (9 * 2)) | (0x2 << (10 * 2)));
 800059c:	4b16      	ldr	r3, [pc, #88]	@ (80005f8 <uart_init+0x78>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a15      	ldr	r2, [pc, #84]	@ (80005f8 <uart_init+0x78>)
 80005a2:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 80005a6:	6013      	str	r3, [r2, #0]

    GPIOA_AFRH &= ~((0xF << ((9 - 8) * 4)) | (0xF << ((10 - 8) * 4)));
 80005a8:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <uart_init+0x7c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a13      	ldr	r2, [pc, #76]	@ (80005fc <uart_init+0x7c>)
 80005ae:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80005b2:	6013      	str	r3, [r2, #0]
    GPIOA_AFRH |=  ((0x7 << ((9 - 8) * 4)) | (0x7 << ((10 - 8) * 4)));
 80005b4:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <uart_init+0x7c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a10      	ldr	r2, [pc, #64]	@ (80005fc <uart_init+0x7c>)
 80005ba:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 80005be:	6013      	str	r3, [r2, #0]

    // Enable USART1 clock
    RCC_APB2ENR |= (1 << 4);
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <uart_init+0x80>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0e      	ldr	r2, [pc, #56]	@ (8000600 <uart_init+0x80>)
 80005c6:	f043 0310 	orr.w	r3, r3, #16
 80005ca:	6013      	str	r3, [r2, #0]

    // Baud rate = 57600, assuming 16 MHz PCLK2
    USART1_BRR = (17 << 4) | 6;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <uart_init+0x84>)
 80005ce:	f44f 728b 	mov.w	r2, #278	@ 0x116
 80005d2:	601a      	str	r2, [r3, #0]

    // Enable USART: UE, TE, RE, RXNEIE
    USART1_CR1 = (1 << 13) | (1 << 3) | (1 << 2) | (1 << 5);
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <uart_init+0x88>)
 80005d6:	f242 022c 	movw	r2, #8236	@ 0x202c
 80005da:	601a      	str	r2, [r3, #0]

    // Enable NVIC for USART1
    NVIC_ISER1 |= (1 << (USART1_IRQ_NUMBER - 32));
 80005dc:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <uart_init+0x8c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a0a      	ldr	r2, [pc, #40]	@ (800060c <uart_init+0x8c>)
 80005e2:	f043 0320 	orr.w	r3, r3, #32
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40023830 	.word	0x40023830
 80005f8:	40020000 	.word	0x40020000
 80005fc:	40020024 	.word	0x40020024
 8000600:	40023844 	.word	0x40023844
 8000604:	40011008 	.word	0x40011008
 8000608:	4001100c 	.word	0x4001100c
 800060c:	e000e104 	.word	0xe000e104

08000610 <uart_send_async>:

void uart_send_async(char c) {
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
    uint16_t next_head = (uart_tx_head + 1) % UART_BUFFER_SIZE;
 800061a:	4b14      	ldr	r3, [pc, #80]	@ (800066c <uart_send_async+0x5c>)
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	b29b      	uxth	r3, r3
 8000620:	3301      	adds	r3, #1
 8000622:	425a      	negs	r2, r3
 8000624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000628:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800062c:	bf58      	it	pl
 800062e:	4253      	negpl	r3, r2
 8000630:	81fb      	strh	r3, [r7, #14]

    if (next_head == uart_tx_tail) {
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <uart_send_async+0x60>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	b29b      	uxth	r3, r3
 8000638:	89fa      	ldrh	r2, [r7, #14]
 800063a:	429a      	cmp	r2, r3
 800063c:	d010      	beq.n	8000660 <uart_send_async+0x50>
        // TX buffer full, drop or handle error
        return;
    }

    uart_tx_buffer[uart_tx_head] = c;
 800063e:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <uart_send_async+0x5c>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	b29b      	uxth	r3, r3
 8000644:	4619      	mov	r1, r3
 8000646:	4a0b      	ldr	r2, [pc, #44]	@ (8000674 <uart_send_async+0x64>)
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	5453      	strb	r3, [r2, r1]
    uart_tx_head = next_head;
 800064c:	4a07      	ldr	r2, [pc, #28]	@ (800066c <uart_send_async+0x5c>)
 800064e:	89fb      	ldrh	r3, [r7, #14]
 8000650:	8013      	strh	r3, [r2, #0]

    // Enable TXE interrupt
    USART1_CR1 |= (1 << 7);
 8000652:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <uart_send_async+0x68>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a08      	ldr	r2, [pc, #32]	@ (8000678 <uart_send_async+0x68>)
 8000658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800065c:	6013      	str	r3, [r2, #0]
 800065e:	e000      	b.n	8000662 <uart_send_async+0x52>
        return;
 8000660:	bf00      	nop
}
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	2000009c 	.word	0x2000009c
 8000670:	2000009e 	.word	0x2000009e
 8000674:	2000001c 	.word	0x2000001c
 8000678:	4001100c 	.word	0x4001100c

0800067c <uart_send_hex>:

void uart_send_hex(uint32_t value) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
    uart_send_async((value >> 24) & 0xFF);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	0e1b      	lsrs	r3, r3, #24
 8000688:	b2db      	uxtb	r3, r3
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ffc0 	bl	8000610 <uart_send_async>
    uart_send_async((value >> 16) & 0xFF);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	0c1b      	lsrs	r3, r3, #16
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ffba 	bl	8000610 <uart_send_async>
    uart_send_async((value >> 8) & 0xFF);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	0a1b      	lsrs	r3, r3, #8
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ffb4 	bl	8000610 <uart_send_async>
    uart_send_async(value & 0xFF);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ffaf 	bl	8000610 <uart_send_async>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <uart_read_byte>:
    const char hex_chars[] = "0123456789ABCDEF";
    uart_send_async(hex_chars[(value >> 4) & 0x0F]);  // High nibble
    uart_send_async(hex_chars[value & 0x0F]);         // Low nibble
}

uint8_t uart_read_byte(char *c) {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    if (uart_data_available) {
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <uart_read_byte+0x34>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d009      	beq.n	80006e2 <uart_read_byte+0x26>
        *c = uart_last_byte;
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <uart_read_byte+0x38>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	701a      	strb	r2, [r3, #0]
        uart_data_available = 0;
 80006d8:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <uart_read_byte+0x34>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
        return 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	e000      	b.n	80006e4 <uart_read_byte+0x28>
    }
    return 0;
 80006e2:	2300      	movs	r3, #0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	200000a1 	.word	0x200000a1
 80006f4:	200000a0 	.word	0x200000a0

080006f8 <uart_send_async_string>:
void uart_send_async_string(const char *str) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000700:	e006      	b.n	8000710 <uart_send_async_string+0x18>
        uart_send_async(*str++);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	1c5a      	adds	r2, r3, #1
 8000706:	607a      	str	r2, [r7, #4]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff80 	bl	8000610 <uart_send_async>
    while (*str) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1f4      	bne.n	8000702 <uart_send_async_string+0xa>
    }
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <USART1_IRQHandler>:
void USART1_IRQHandler(void) {
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
    // RXNE
    if (USART1_SR & (1 << 5)) {
 8000728:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <USART1_IRQHandler+0x90>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f003 0320 	and.w	r3, r3, #32
 8000730:	2b00      	cmp	r3, #0
 8000732:	d007      	beq.n	8000744 <USART1_IRQHandler+0x20>
        uart_last_byte = USART1_DR;
 8000734:	4b20      	ldr	r3, [pc, #128]	@ (80007b8 <USART1_IRQHandler+0x94>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b20      	ldr	r3, [pc, #128]	@ (80007bc <USART1_IRQHandler+0x98>)
 800073c:	701a      	strb	r2, [r3, #0]
        uart_data_available = 1;
 800073e:	4b20      	ldr	r3, [pc, #128]	@ (80007c0 <USART1_IRQHandler+0x9c>)
 8000740:	2201      	movs	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
    }

    // TXE
    if ((USART1_SR & (1 << 7)) && (USART1_CR1 & (1 << 7))) {
 8000744:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <USART1_IRQHandler+0x90>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800074c:	2b00      	cmp	r3, #0
 800074e:	d02b      	beq.n	80007a8 <USART1_IRQHandler+0x84>
 8000750:	4b1c      	ldr	r3, [pc, #112]	@ (80007c4 <USART1_IRQHandler+0xa0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000758:	2b00      	cmp	r3, #0
 800075a:	d025      	beq.n	80007a8 <USART1_IRQHandler+0x84>
        if (uart_tx_tail != uart_tx_head) {
 800075c:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <USART1_IRQHandler+0xa4>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	b29a      	uxth	r2, r3
 8000762:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <USART1_IRQHandler+0xa8>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	b29b      	uxth	r3, r3
 8000768:	429a      	cmp	r2, r3
 800076a:	d017      	beq.n	800079c <USART1_IRQHandler+0x78>
            USART1_DR = uart_tx_buffer[uart_tx_tail];
 800076c:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <USART1_IRQHandler+0xa4>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	b29b      	uxth	r3, r3
 8000772:	461a      	mov	r2, r3
 8000774:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <USART1_IRQHandler+0xac>)
 8000776:	5c9b      	ldrb	r3, [r3, r2]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <USART1_IRQHandler+0x94>)
 800077c:	601a      	str	r2, [r3, #0]
            uart_tx_tail = (uart_tx_tail + 1) % UART_BUFFER_SIZE;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <USART1_IRQHandler+0xa4>)
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	b29b      	uxth	r3, r3
 8000784:	3301      	adds	r3, #1
 8000786:	425a      	negs	r2, r3
 8000788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800078c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000790:	bf58      	it	pl
 8000792:	4253      	negpl	r3, r2
 8000794:	b29a      	uxth	r2, r3
 8000796:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <USART1_IRQHandler+0xa4>)
 8000798:	801a      	strh	r2, [r3, #0]
        } else {
            // Buffer empty, disable TXE interrupt
            USART1_CR1 &= ~(1 << 7);
        }
    }
}
 800079a:	e005      	b.n	80007a8 <USART1_IRQHandler+0x84>
            USART1_CR1 &= ~(1 << 7);
 800079c:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <USART1_IRQHandler+0xa0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a08      	ldr	r2, [pc, #32]	@ (80007c4 <USART1_IRQHandler+0xa0>)
 80007a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40011000 	.word	0x40011000
 80007b8:	40011004 	.word	0x40011004
 80007bc:	200000a0 	.word	0x200000a0
 80007c0:	200000a1 	.word	0x200000a1
 80007c4:	4001100c 	.word	0x4001100c
 80007c8:	2000009e 	.word	0x2000009e
 80007cc:	2000009c 	.word	0x2000009c
 80007d0:	2000001c 	.word	0x2000001c

080007d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d4:	480d      	ldr	r0, [pc, #52]	@ (800080c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480c      	ldr	r0, [pc, #48]	@ (8000810 <LoopForever+0x6>)
  ldr r1, =_edata
 80007de:	490d      	ldr	r1, [pc, #52]	@ (8000814 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000818 <LoopForever+0xe>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a0a      	ldr	r2, [pc, #40]	@ (800081c <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000820 <LoopForever+0x16>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000802:	f000 f811 	bl	8000828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000806:	f7ff fdef 	bl	80003e8 <main>

0800080a <LoopForever>:

LoopForever:
  b LoopForever
 800080a:	e7fe      	b.n	800080a <LoopForever>
  ldr   r0, =_estack
 800080c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000814:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000818:	080008c4 	.word	0x080008c4
  ldr r2, =_sbss
 800081c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000820:	200000a4 	.word	0x200000a4

08000824 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC_IRQHandler>
	...

08000828 <__libc_init_array>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	4d0d      	ldr	r5, [pc, #52]	@ (8000860 <__libc_init_array+0x38>)
 800082c:	4c0d      	ldr	r4, [pc, #52]	@ (8000864 <__libc_init_array+0x3c>)
 800082e:	1b64      	subs	r4, r4, r5
 8000830:	10a4      	asrs	r4, r4, #2
 8000832:	2600      	movs	r6, #0
 8000834:	42a6      	cmp	r6, r4
 8000836:	d109      	bne.n	800084c <__libc_init_array+0x24>
 8000838:	4d0b      	ldr	r5, [pc, #44]	@ (8000868 <__libc_init_array+0x40>)
 800083a:	4c0c      	ldr	r4, [pc, #48]	@ (800086c <__libc_init_array+0x44>)
 800083c:	f000 f818 	bl	8000870 <_init>
 8000840:	1b64      	subs	r4, r4, r5
 8000842:	10a4      	asrs	r4, r4, #2
 8000844:	2600      	movs	r6, #0
 8000846:	42a6      	cmp	r6, r4
 8000848:	d105      	bne.n	8000856 <__libc_init_array+0x2e>
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000850:	4798      	blx	r3
 8000852:	3601      	adds	r6, #1
 8000854:	e7ee      	b.n	8000834 <__libc_init_array+0xc>
 8000856:	f855 3b04 	ldr.w	r3, [r5], #4
 800085a:	4798      	blx	r3
 800085c:	3601      	adds	r6, #1
 800085e:	e7f2      	b.n	8000846 <__libc_init_array+0x1e>
 8000860:	080008bc 	.word	0x080008bc
 8000864:	080008bc 	.word	0x080008bc
 8000868:	080008bc 	.word	0x080008bc
 800086c:	080008c0 	.word	0x080008c0

08000870 <_init>:
 8000870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000872:	bf00      	nop
 8000874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000876:	bc08      	pop	{r3}
 8000878:	469e      	mov	lr, r3
 800087a:	4770      	bx	lr

0800087c <_fini>:
 800087c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800087e:	bf00      	nop
 8000880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000882:	bc08      	pop	{r3}
 8000884:	469e      	mov	lr, r3
 8000886:	4770      	bx	lr
