
recieveUART_sendSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007a0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000934  08000934  00001934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000968  08000968  00001970  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000968  08000968  00001970  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000968  08000970  00001970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000968  08000968  00001968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800096c  0800096c  0000196c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000000  08000970  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08000970  00002128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000078d  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000041f  00000000  00000000  0000212d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000130  00000000  00000000  00002550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000d1  00000000  00000000  00002680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001355  00000000  00000000  00002751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000015a9  00000000  00000000  00003aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004956  00000000  00000000  0000504f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000099a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000344  00000000  00000000  000099e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00009d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800091c 	.word	0x0800091c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800091c 	.word	0x0800091c

080001d4 <delay_ms>:

#include "stm32f401.h"
#include "spi.h"
#include "can.h"

void delay_ms(volatile uint32_t ms) {
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
    // Approximate cycles per ms for 16 MHz = 16,000 cycles/ms
    // Each iteration of the inner loop takes roughly 4 CPU cycles (NOP + loop overhead)
    // So number of iterations for 1 ms = 16000 / 4 = 4000

    for (volatile uint32_t i = 0; i < ms; i++) {
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e00d      	b.n	80001fe <delay_ms+0x2a>
        for (volatile uint32_t j = 0; j < 4000; j++) {
 80001e2:	2300      	movs	r3, #0
 80001e4:	60bb      	str	r3, [r7, #8]
 80001e6:	e003      	b.n	80001f0 <delay_ms+0x1c>
            __asm__("nop");
 80001e8:	bf00      	nop
        for (volatile uint32_t j = 0; j < 4000; j++) {
 80001ea:	68bb      	ldr	r3, [r7, #8]
 80001ec:	3301      	adds	r3, #1
 80001ee:	60bb      	str	r3, [r7, #8]
 80001f0:	68bb      	ldr	r3, [r7, #8]
 80001f2:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80001f6:	d3f7      	bcc.n	80001e8 <delay_ms+0x14>
    for (volatile uint32_t i = 0; i < ms; i++) {
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	3301      	adds	r3, #1
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fa      	ldr	r2, [r7, #12]
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	429a      	cmp	r2, r3
 8000204:	d3ed      	bcc.n	80001e2 <delay_ms+0xe>
        }
    }
}
 8000206:	bf00      	nop
 8000208:	bf00      	nop
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <cs_low>:

void cs_low(void) {
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
    GPIOA_BSRR = (1 << (CS_PIN + 16));
 8000218:	4b04      	ldr	r3, [pc, #16]	@ (800022c <cs_low+0x18>)
 800021a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800021e:	601a      	str	r2, [r3, #0]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40020018 	.word	0x40020018

08000230 <cs_high>:

void cs_high(void) {
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
    GPIOA_BSRR = (1 << CS_PIN);
 8000234:	4b03      	ldr	r3, [pc, #12]	@ (8000244 <cs_high+0x14>)
 8000236:	2210      	movs	r2, #16
 8000238:	601a      	str	r2, [r3, #0]
}
 800023a:	bf00      	nop
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr
 8000244:	40020018 	.word	0x40020018

08000248 <mcp2515_write_register>:

void mcp2515_write_register(uint8_t reg, uint8_t val) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	460a      	mov	r2, r1
 8000252:	71fb      	strb	r3, [r7, #7]
 8000254:	4613      	mov	r3, r2
 8000256:	71bb      	strb	r3, [r7, #6]
    cs_low();
 8000258:	f7ff ffdc 	bl	8000214 <cs_low>
    spi1_transfer(MCP2515_WRITE);
 800025c:	2002      	movs	r0, #2
 800025e:	f000 f931 	bl	80004c4 <spi1_transfer>
    spi1_transfer(reg);
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f92d 	bl	80004c4 <spi1_transfer>
    spi1_transfer(val);
 800026a:	79bb      	ldrb	r3, [r7, #6]
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f929 	bl	80004c4 <spi1_transfer>
    cs_high();
 8000272:	f7ff ffdd 	bl	8000230 <cs_high>
}
 8000276:	bf00      	nop
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <mcp2515_read_register>:

uint8_t mcp2515_read_register(uint8_t reg) {
 800027e:	b580      	push	{r7, lr}
 8000280:	b084      	sub	sp, #16
 8000282:	af00      	add	r7, sp, #0
 8000284:	4603      	mov	r3, r0
 8000286:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    cs_low();
 8000288:	f7ff ffc4 	bl	8000214 <cs_low>
    spi1_transfer(MCP2515_READ);
 800028c:	2003      	movs	r0, #3
 800028e:	f000 f919 	bl	80004c4 <spi1_transfer>
    spi1_transfer(reg);
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f915 	bl	80004c4 <spi1_transfer>
    val = spi1_transfer(0xFF);
 800029a:	20ff      	movs	r0, #255	@ 0xff
 800029c:	f000 f912 	bl	80004c4 <spi1_transfer>
 80002a0:	4603      	mov	r3, r0
 80002a2:	73fb      	strb	r3, [r7, #15]
    cs_high();
 80002a4:	f7ff ffc4 	bl	8000230 <cs_high>
    return val;
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	3710      	adds	r7, #16
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <mcp2515_reset>:

static void mcp2515_reset(void) {
 80002b2:	b580      	push	{r7, lr}
 80002b4:	af00      	add	r7, sp, #0
    cs_low();
 80002b6:	f7ff ffad 	bl	8000214 <cs_low>
    spi1_transfer(MCP2515_RESET);
 80002ba:	20c0      	movs	r0, #192	@ 0xc0
 80002bc:	f000 f902 	bl	80004c4 <spi1_transfer>
    cs_high();
 80002c0:	f7ff ffb6 	bl	8000230 <cs_high>
    delay_ms(10);
 80002c4:	200a      	movs	r0, #10
 80002c6:	f7ff ff85 	bl	80001d4 <delay_ms>
}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <can_init>:

void can_init(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
    // Enable GPIOA clock
    RCC_AHB1ENR |= (1 << 0);
 80002d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000348 <can_init+0x78>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000348 <can_init+0x78>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6013      	str	r3, [r2, #0]

    // Configure CS_PIN as output
    GPIOA_MODER &= ~(0x3 << (CS_PIN * 2));
 80002e0:	4b1a      	ldr	r3, [pc, #104]	@ (800034c <can_init+0x7c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a19      	ldr	r2, [pc, #100]	@ (800034c <can_init+0x7c>)
 80002e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80002ea:	6013      	str	r3, [r2, #0]
    GPIOA_MODER |=  (0x1 << (CS_PIN * 2));  // Output mode
 80002ec:	4b17      	ldr	r3, [pc, #92]	@ (800034c <can_init+0x7c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a16      	ldr	r2, [pc, #88]	@ (800034c <can_init+0x7c>)
 80002f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002f6:	6013      	str	r3, [r2, #0]
    cs_high();
 80002f8:	f7ff ff9a 	bl	8000230 <cs_high>

    // Reset MCP2515 chip
    mcp2515_reset();
 80002fc:	f7ff ffd9 	bl	80002b2 <mcp2515_reset>

    // Enter configuration mode
    mcp2515_write_register(MCP2515_CANCTRL, 0x80);
 8000300:	2180      	movs	r1, #128	@ 0x80
 8000302:	200f      	movs	r0, #15
 8000304:	f7ff ffa0 	bl	8000248 <mcp2515_write_register>
    delay_ms(10);
 8000308:	200a      	movs	r0, #10
 800030a:	f7ff ff63 	bl	80001d4 <delay_ms>

    // Set bit timing for 125 kbps with BRP = 5 and 16 MHz oscillator
    mcp2515_write_register(MCP2515_CNF1, 0x05);
 800030e:	2105      	movs	r1, #5
 8000310:	202a      	movs	r0, #42	@ 0x2a
 8000312:	f7ff ff99 	bl	8000248 <mcp2515_write_register>
    mcp2515_write_register(MCP2515_CNF2, 0x92);
 8000316:	2192      	movs	r1, #146	@ 0x92
 8000318:	2029      	movs	r0, #41	@ 0x29
 800031a:	f7ff ff95 	bl	8000248 <mcp2515_write_register>
    mcp2515_write_register(MCP2515_CNF3, 0x03);
 800031e:	2103      	movs	r1, #3
 8000320:	2028      	movs	r0, #40	@ 0x28
 8000322:	f7ff ff91 	bl	8000248 <mcp2515_write_register>

    // Accept all messages
    mcp2515_write_register(MCP2515_RXB0CTRL, 0x00);
 8000326:	2100      	movs	r1, #0
 8000328:	2060      	movs	r0, #96	@ 0x60
 800032a:	f7ff ff8d 	bl	8000248 <mcp2515_write_register>
    mcp2515_write_register(MCP2515_RXB1CTRL, 0x00);
 800032e:	2100      	movs	r1, #0
 8000330:	2070      	movs	r0, #112	@ 0x70
 8000332:	f7ff ff89 	bl	8000248 <mcp2515_write_register>

    // Switch to normal mode
    mcp2515_write_register(MCP2515_CANCTRL, 0x00);
 8000336:	2100      	movs	r1, #0
 8000338:	200f      	movs	r0, #15
 800033a:	f7ff ff85 	bl	8000248 <mcp2515_write_register>
    //mcp2515_write_register(MCP2515_CANCTRL, 0x40); // 0x40 = Loopback mode
    delay_ms(10);
 800033e:	200a      	movs	r0, #10
 8000340:	f7ff ff48 	bl	80001d4 <delay_ms>
}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40023830 	.word	0x40023830
 800034c:	40020000 	.word	0x40020000

08000350 <can_send_bytes>:

bool can_send_bytes(uint8_t* data, uint8_t len) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	70fb      	strb	r3, [r7, #3]
    if (len > 8) return false; // MCP2515 supports max 8 bytes
 800035c:	78fb      	ldrb	r3, [r7, #3]
 800035e:	2b08      	cmp	r3, #8
 8000360:	d901      	bls.n	8000366 <can_send_bytes+0x16>
 8000362:	2300      	movs	r3, #0
 8000364:	e041      	b.n	80003ea <can_send_bytes+0x9a>

    // Check if TX buffer is free (TXREQ should be 0)
    uint8_t txb0ctrl = mcp2515_read_register(MCP2515_TXB0CTRL);
 8000366:	2030      	movs	r0, #48	@ 0x30
 8000368:	f7ff ff89 	bl	800027e <mcp2515_read_register>
 800036c:	4603      	mov	r3, r0
 800036e:	73bb      	strb	r3, [r7, #14]
    if (txb0ctrl & 0x08) {
 8000370:	7bbb      	ldrb	r3, [r7, #14]
 8000372:	f003 0308 	and.w	r3, r3, #8
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <can_send_bytes+0x2e>
        return false; // Buffer busy
 800037a:	2300      	movs	r3, #0
 800037c:	e035      	b.n	80003ea <can_send_bytes+0x9a>
    }

    cs_low();
 800037e:	f7ff ff49 	bl	8000214 <cs_low>
    spi1_transfer(MCP2515_WRITE);
 8000382:	2002      	movs	r0, #2
 8000384:	f000 f89e 	bl	80004c4 <spi1_transfer>
    spi1_transfer(MCP2515_TXB0SIDH);     // Start writing at TXB0SIDH
 8000388:	2031      	movs	r0, #49	@ 0x31
 800038a:	f000 f89b 	bl	80004c4 <spi1_transfer>
    spi1_transfer(0x00);                 // SIDH
 800038e:	2000      	movs	r0, #0
 8000390:	f000 f898 	bl	80004c4 <spi1_transfer>
    spi1_transfer(0x00);                 // SIDL
 8000394:	2000      	movs	r0, #0
 8000396:	f000 f895 	bl	80004c4 <spi1_transfer>
    spi1_transfer(0x00);                 // EID8
 800039a:	2000      	movs	r0, #0
 800039c:	f000 f892 	bl	80004c4 <spi1_transfer>
    spi1_transfer(0x00);                 // EID0
 80003a0:	2000      	movs	r0, #0
 80003a2:	f000 f88f 	bl	80004c4 <spi1_transfer>
    spi1_transfer(len & 0x0F);           // DLC: data length (max 8)
 80003a6:	78fb      	ldrb	r3, [r7, #3]
 80003a8:	f003 030f 	and.w	r3, r3, #15
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 f888 	bl	80004c4 <spi1_transfer>

    for (uint8_t i = 0; i < len; i++) {
 80003b4:	2300      	movs	r3, #0
 80003b6:	73fb      	strb	r3, [r7, #15]
 80003b8:	e009      	b.n	80003ce <can_send_bytes+0x7e>
        spi1_transfer(data[i]);
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	4413      	add	r3, r2
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 f87e 	bl	80004c4 <spi1_transfer>
    for (uint8_t i = 0; i < len; i++) {
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	3301      	adds	r3, #1
 80003cc:	73fb      	strb	r3, [r7, #15]
 80003ce:	7bfa      	ldrb	r2, [r7, #15]
 80003d0:	78fb      	ldrb	r3, [r7, #3]
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d3f1      	bcc.n	80003ba <can_send_bytes+0x6a>
    }
    cs_high();
 80003d6:	f7ff ff2b 	bl	8000230 <cs_high>

    // Request to send
    cs_low();
 80003da:	f7ff ff1b 	bl	8000214 <cs_low>
    spi1_transfer(MCP2515_RTS_TXB0);
 80003de:	2081      	movs	r0, #129	@ 0x81
 80003e0:	f000 f870 	bl	80004c4 <spi1_transfer>
    cs_high();
 80003e4:	f7ff ff24 	bl	8000230 <cs_high>

    return true;
 80003e8:	2301      	movs	r3, #1
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3710      	adds	r7, #16
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <main>:
#include "stm32f401.h"
#include "uart.h"
#include "can.h"
#include "spi.h"

int main(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
    spi1_init();
 80003f8:	f000 f80c 	bl	8000414 <spi1_init>
    uart_init();
 80003fc:	f000 f8fc 	bl	80005f8 <uart_init>
    can_init();
 8000400:	f7ff ff66 	bl	80002d0 <can_init>

    uart_send_async_string("System Initialized\r\n");
 8000404:	4802      	ldr	r0, [pc, #8]	@ (8000410 <main+0x1c>)
 8000406:	f000 f975 	bl	80006f4 <uart_send_async_string>

    while (1) {

    	uart_try_send_from_fifo();
 800040a:	f000 f989 	bl	8000720 <uart_try_send_from_fifo>
 800040e:	e7fc      	b.n	800040a <main+0x16>
 8000410:	08000934 	.word	0x08000934

08000414 <spi1_init>:
 */

#include "stm32f401.h"
#include "spi.h"

void spi1_init(void) {
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
    RCC_AHB1ENR |= (1 << 0);     // GPIOA
 8000418:	4b25      	ldr	r3, [pc, #148]	@ (80004b0 <spi1_init+0x9c>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a24      	ldr	r2, [pc, #144]	@ (80004b0 <spi1_init+0x9c>)
 800041e:	f043 0301 	orr.w	r3, r3, #1
 8000422:	6013      	str	r3, [r2, #0]
    RCC_APB2ENR |= (1 << 12);    // SPI1
 8000424:	4b23      	ldr	r3, [pc, #140]	@ (80004b4 <spi1_init+0xa0>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a22      	ldr	r2, [pc, #136]	@ (80004b4 <spi1_init+0xa0>)
 800042a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800042e:	6013      	str	r3, [r2, #0]

    // PA5 = SCK, PA6 = MISO, PA7 = MOSI
    // Clear PA5, PA6, PA7 (each pin is 2 bits in MODER)
    GPIOA_MODER &= ~((3 << (5 * 2)) | (3 << (6 * 2)) | (3 << (7 * 2)));
 8000430:	4b21      	ldr	r3, [pc, #132]	@ (80004b8 <spi1_init+0xa4>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a20      	ldr	r2, [pc, #128]	@ (80004b8 <spi1_init+0xa4>)
 8000436:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 800043a:	6013      	str	r3, [r2, #0]
    // Set to Alternate Function mode (10)
    GPIOA_MODER |=  ((2 << (5 * 2)) | (2 << (6 * 2)) | (2 << (7 * 2)));
 800043c:	4b1e      	ldr	r3, [pc, #120]	@ (80004b8 <spi1_init+0xa4>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a1d      	ldr	r2, [pc, #116]	@ (80004b8 <spi1_init+0xa4>)
 8000442:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000446:	6013      	str	r3, [r2, #0]


    GPIOA_AFRL &= ~((0xF << (4 * 5)) | (0xF << (4 * 6)) | (0xF << (4 * 7)));
 8000448:	4b1c      	ldr	r3, [pc, #112]	@ (80004bc <spi1_init+0xa8>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a1b      	ldr	r2, [pc, #108]	@ (80004bc <spi1_init+0xa8>)
 800044e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000452:	6013      	str	r3, [r2, #0]
    GPIOA_AFRL |=  ((5 << (4 * 5)) | (5 << (4 * 6)) | (5 << (4 * 7)));  // AF5
 8000454:	4b19      	ldr	r3, [pc, #100]	@ (80004bc <spi1_init+0xa8>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a18      	ldr	r2, [pc, #96]	@ (80004bc <spi1_init+0xa8>)
 800045a:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 800045e:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000462:	6013      	str	r3, [r2, #0]

    SPI1_CR1 = 0;                     // Reset
 8000464:	4b16      	ldr	r3, [pc, #88]	@ (80004c0 <spi1_init+0xac>)
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
    SPI1_CR1 |= (1 << 2);             // Master
 800046a:	4b15      	ldr	r3, [pc, #84]	@ (80004c0 <spi1_init+0xac>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a14      	ldr	r2, [pc, #80]	@ (80004c0 <spi1_init+0xac>)
 8000470:	f043 0304 	orr.w	r3, r3, #4
 8000474:	6013      	str	r3, [r2, #0]
    SPI1_CR1 &= ~((1 << 1) | (1 << 0));  // ✅ Mode 0
 8000476:	4b12      	ldr	r3, [pc, #72]	@ (80004c0 <spi1_init+0xac>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a11      	ldr	r2, [pc, #68]	@ (80004c0 <spi1_init+0xac>)
 800047c:	f023 0303 	bic.w	r3, r3, #3
 8000480:	6013      	str	r3, [r2, #0]
    SPI1_CR1 |= (3 << 3);             // Baud rate = fPCLK/16
 8000482:	4b0f      	ldr	r3, [pc, #60]	@ (80004c0 <spi1_init+0xac>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a0e      	ldr	r2, [pc, #56]	@ (80004c0 <spi1_init+0xac>)
 8000488:	f043 0318 	orr.w	r3, r3, #24
 800048c:	6013      	str	r3, [r2, #0]
    SPI1_CR1 |= (1 << 9) | (1 << 8);  // SSM=1, SSI=1 (manual NSS)
 800048e:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <spi1_init+0xac>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a0b      	ldr	r2, [pc, #44]	@ (80004c0 <spi1_init+0xac>)
 8000494:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000498:	6013      	str	r3, [r2, #0]
    SPI1_CR1 |= (1 << 6);             // SPI enable
 800049a:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <spi1_init+0xac>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a08      	ldr	r2, [pc, #32]	@ (80004c0 <spi1_init+0xac>)
 80004a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004a4:	6013      	str	r3, [r2, #0]
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	40023830 	.word	0x40023830
 80004b4:	40023844 	.word	0x40023844
 80004b8:	40020000 	.word	0x40020000
 80004bc:	40020020 	.word	0x40020020
 80004c0:	40013000 	.word	0x40013000

080004c4 <spi1_transfer>:

uint8_t spi1_transfer(uint8_t data) {
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
    while (!(SPI1_SR & (1 << 1)));  // Wait until TXE
 80004ce:	bf00      	nop
 80004d0:	4b10      	ldr	r3, [pc, #64]	@ (8000514 <spi1_transfer+0x50>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f003 0302 	and.w	r3, r3, #2
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0f9      	beq.n	80004d0 <spi1_transfer+0xc>
    SPI1_DR = data;
 80004dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000518 <spi1_transfer+0x54>)
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	6013      	str	r3, [r2, #0]
    while (!(SPI1_SR & (1 << 0)));  // Wait until RXNE
 80004e2:	bf00      	nop
 80004e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000514 <spi1_transfer+0x50>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f003 0301 	and.w	r3, r3, #1
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d0f9      	beq.n	80004e4 <spi1_transfer+0x20>
    uint8_t received = SPI1_DR;
 80004f0:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <spi1_transfer+0x54>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	73fb      	strb	r3, [r7, #15]
    while (SPI1_SR & (1 << 7));     // Wait until BSY cleared
 80004f6:	bf00      	nop
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <spi1_transfer+0x50>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000500:	2b00      	cmp	r3, #0
 8000502:	d1f9      	bne.n	80004f8 <spi1_transfer+0x34>
    return received;
 8000504:	7bfb      	ldrb	r3, [r7, #15]
}
 8000506:	4618      	mov	r0, r3
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40013008 	.word	0x40013008
 8000518:	4001300c 	.word	0x4001300c

0800051c <fifo_available>:
static volatile uint16_t fifo_tail = 0;

static volatile uint8_t collecting = 0;

// FIFO helpers
static uint16_t fifo_available(void) {
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
    return (fifo_head - fifo_tail + FIFO_SIZE) % FIFO_SIZE;
 8000520:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <fifo_available+0x30>)
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	b29b      	uxth	r3, r3
 8000526:	461a      	mov	r2, r3
 8000528:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <fifo_available+0x34>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	b29b      	uxth	r3, r3
 800052e:	1ad3      	subs	r3, r2, r3
 8000530:	3380      	adds	r3, #128	@ 0x80
 8000532:	425a      	negs	r2, r3
 8000534:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000538:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800053c:	bf58      	it	pl
 800053e:	4253      	negpl	r3, r2
 8000540:	b29b      	uxth	r3, r3
}
 8000542:	4618      	mov	r0, r3
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	20000120 	.word	0x20000120
 8000550:	20000122 	.word	0x20000122

08000554 <fifo_free_space>:

static uint16_t fifo_free_space(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
    return FIFO_SIZE - fifo_available() - 1;
 8000558:	f7ff ffe0 	bl	800051c <fifo_available>
 800055c:	4603      	mov	r3, r0
 800055e:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000562:	b29b      	uxth	r3, r3
}
 8000564:	4618      	mov	r0, r3
 8000566:	bd80      	pop	{r7, pc}

08000568 <fifo_push>:

static void fifo_push(uint8_t byte) {
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
    fifo[fifo_head] = byte;
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <fifo_push+0x40>)
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	b29b      	uxth	r3, r3
 8000578:	4619      	mov	r1, r3
 800057a:	4a0c      	ldr	r2, [pc, #48]	@ (80005ac <fifo_push+0x44>)
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	5453      	strb	r3, [r2, r1]
    fifo_head = (fifo_head + 1) % FIFO_SIZE;
 8000580:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <fifo_push+0x40>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	b29b      	uxth	r3, r3
 8000586:	3301      	adds	r3, #1
 8000588:	425a      	negs	r2, r3
 800058a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800058e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000592:	bf58      	it	pl
 8000594:	4253      	negpl	r3, r2
 8000596:	b29a      	uxth	r2, r3
 8000598:	4b03      	ldr	r3, [pc, #12]	@ (80005a8 <fifo_push+0x40>)
 800059a:	801a      	strh	r2, [r3, #0]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	20000120 	.word	0x20000120
 80005ac:	200000a0 	.word	0x200000a0

080005b0 <fifo_pop>:

static uint8_t fifo_pop(void) {
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
    uint8_t byte = fifo[fifo_tail];
 80005b6:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <fifo_pop+0x40>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	461a      	mov	r2, r3
 80005be:	4b0d      	ldr	r3, [pc, #52]	@ (80005f4 <fifo_pop+0x44>)
 80005c0:	5c9b      	ldrb	r3, [r3, r2]
 80005c2:	71fb      	strb	r3, [r7, #7]
    fifo_tail = (fifo_tail + 1) % FIFO_SIZE;
 80005c4:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <fifo_pop+0x40>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	3301      	adds	r3, #1
 80005cc:	425a      	negs	r2, r3
 80005ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80005d6:	bf58      	it	pl
 80005d8:	4253      	negpl	r3, r2
 80005da:	b29a      	uxth	r2, r3
 80005dc:	4b04      	ldr	r3, [pc, #16]	@ (80005f0 <fifo_pop+0x40>)
 80005de:	801a      	strh	r2, [r3, #0]
    return byte;
 80005e0:	79fb      	ldrb	r3, [r7, #7]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000122 	.word	0x20000122
 80005f4:	200000a0 	.word	0x200000a0

080005f8 <uart_init>:

void uart_init(void) {
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
    RCC_AHB1ENR |= (1 << 0);   // GPIOA clock
 80005fc:	4b1b      	ldr	r3, [pc, #108]	@ (800066c <uart_init+0x74>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a1a      	ldr	r2, [pc, #104]	@ (800066c <uart_init+0x74>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6013      	str	r3, [r2, #0]
    RCC_APB2ENR |= (1 << 4);   // USART1 clock
 8000608:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <uart_init+0x78>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a18      	ldr	r2, [pc, #96]	@ (8000670 <uart_init+0x78>)
 800060e:	f043 0310 	orr.w	r3, r3, #16
 8000612:	6013      	str	r3, [r2, #0]

    // PA9, PA10 to AF7 (USART1)
    GPIOA_MODER &= ~((3 << (9 * 2)) | (3 << (10 * 2)));
 8000614:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <uart_init+0x7c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a16      	ldr	r2, [pc, #88]	@ (8000674 <uart_init+0x7c>)
 800061a:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 800061e:	6013      	str	r3, [r2, #0]
    GPIOA_MODER |= ((2 << (9 * 2)) | (2 << (10 * 2)));
 8000620:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <uart_init+0x7c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a13      	ldr	r2, [pc, #76]	@ (8000674 <uart_init+0x7c>)
 8000626:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 800062a:	6013      	str	r3, [r2, #0]
    GPIOA_AFRH &= ~((0xF << ((9 - 8) * 4)) | (0xF << ((10 - 8) * 4)));
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <uart_init+0x80>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a11      	ldr	r2, [pc, #68]	@ (8000678 <uart_init+0x80>)
 8000632:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8000636:	6013      	str	r3, [r2, #0]
    GPIOA_AFRH |= ((7 << ((9 - 8) * 4)) | (7 << ((10 - 8) * 4)));
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <uart_init+0x80>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a0e      	ldr	r2, [pc, #56]	@ (8000678 <uart_init+0x80>)
 800063e:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 8000642:	6013      	str	r3, [r2, #0]

    USART1_BRR = (17 << 4) | 6;  // 57600 baud @ 16MHz
 8000644:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <uart_init+0x84>)
 8000646:	f44f 728b 	mov.w	r2, #278	@ 0x116
 800064a:	601a      	str	r2, [r3, #0]
    USART1_CR1 = (1 << 13) | (1 << 3) | (1 << 2) | (1 << 5);  // UE, TE, RE, RXNEIE
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <uart_init+0x88>)
 800064e:	f242 022c 	movw	r2, #8236	@ 0x202c
 8000652:	601a      	str	r2, [r3, #0]

    NVIC_ISER1 |= (1 << (USART1_IRQ_NUMBER - 32));
 8000654:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <uart_init+0x8c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0a      	ldr	r2, [pc, #40]	@ (8000684 <uart_init+0x8c>)
 800065a:	f043 0320 	orr.w	r3, r3, #32
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40023830 	.word	0x40023830
 8000670:	40023844 	.word	0x40023844
 8000674:	40020000 	.word	0x40020000
 8000678:	40020024 	.word	0x40020024
 800067c:	40011008 	.word	0x40011008
 8000680:	4001100c 	.word	0x4001100c
 8000684:	e000e104 	.word	0xe000e104

08000688 <uart_send_async>:

void uart_send_async(char c) {
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
    uint16_t next = (uart_tx_head + 1) % UART_BUFFER_SIZE;
 8000692:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <uart_send_async+0x5c>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	b29b      	uxth	r3, r3
 8000698:	3301      	adds	r3, #1
 800069a:	425a      	negs	r2, r3
 800069c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80006a4:	bf58      	it	pl
 80006a6:	4253      	negpl	r3, r2
 80006a8:	81fb      	strh	r3, [r7, #14]
    if (next == uart_tx_tail) return; // Buffer full
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <uart_send_async+0x60>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	89fa      	ldrh	r2, [r7, #14]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d010      	beq.n	80006d8 <uart_send_async+0x50>

    uart_tx_buffer[uart_tx_head] = c;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <uart_send_async+0x5c>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	4619      	mov	r1, r3
 80006be:	4a0b      	ldr	r2, [pc, #44]	@ (80006ec <uart_send_async+0x64>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	5453      	strb	r3, [r2, r1]
    uart_tx_head = next;
 80006c4:	4a07      	ldr	r2, [pc, #28]	@ (80006e4 <uart_send_async+0x5c>)
 80006c6:	89fb      	ldrh	r3, [r7, #14]
 80006c8:	8013      	strh	r3, [r2, #0]

    USART1_CR1 |= (1 << 7); // Enable TXE interrupt
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <uart_send_async+0x68>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a08      	ldr	r2, [pc, #32]	@ (80006f0 <uart_send_async+0x68>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	e000      	b.n	80006da <uart_send_async+0x52>
    if (next == uart_tx_tail) return; // Buffer full
 80006d8:	bf00      	nop
}
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	2000009c 	.word	0x2000009c
 80006e8:	2000009e 	.word	0x2000009e
 80006ec:	2000001c 	.word	0x2000001c
 80006f0:	4001100c 	.word	0x4001100c

080006f4 <uart_send_async_string>:

void uart_send_async_string(const char *s) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
    while (*s) uart_send_async(*s++);
 80006fc:	e006      	b.n	800070c <uart_send_async_string+0x18>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	1c5a      	adds	r2, r3, #1
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ffbe 	bl	8000688 <uart_send_async>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1f4      	bne.n	80006fe <uart_send_async_string+0xa>
}
 8000714:	bf00      	nop
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <uart_try_send_from_fifo>:

void uart_try_send_from_fifo(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
    while (fifo_available() >= CAN_FRAME_SIZE) {
 8000726:	e02a      	b.n	800077e <uart_try_send_from_fifo+0x5e>
        uint8_t frame[CAN_FRAME_SIZE];
        for (int i = 0; i < CAN_FRAME_SIZE; i++) frame[i] = fifo_pop();
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	e00b      	b.n	8000746 <uart_try_send_from_fifo+0x26>
 800072e:	f7ff ff3f 	bl	80005b0 <fifo_pop>
 8000732:	4603      	mov	r3, r0
 8000734:	4619      	mov	r1, r3
 8000736:	463a      	mov	r2, r7
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4413      	add	r3, r2
 800073c:	460a      	mov	r2, r1
 800073e:	701a      	strb	r2, [r3, #0]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	3301      	adds	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2b07      	cmp	r3, #7
 800074a:	ddf0      	ble.n	800072e <uart_try_send_from_fifo+0xe>

        uint8_t retries = 100;
 800074c:	2364      	movs	r3, #100	@ 0x64
 800074e:	72fb      	strb	r3, [r7, #11]
        while (!can_send_bytes(frame, CAN_FRAME_SIZE) && retries--);
 8000750:	bf00      	nop
 8000752:	463b      	mov	r3, r7
 8000754:	2108      	movs	r1, #8
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fdfa 	bl	8000350 <can_send_bytes>
 800075c:	4603      	mov	r3, r0
 800075e:	f083 0301 	eor.w	r3, r3, #1
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d004      	beq.n	8000772 <uart_try_send_from_fifo+0x52>
 8000768:	7afb      	ldrb	r3, [r7, #11]
 800076a:	1e5a      	subs	r2, r3, #1
 800076c:	72fa      	strb	r2, [r7, #11]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1ef      	bne.n	8000752 <uart_try_send_from_fifo+0x32>

        if (retries == 0)
 8000772:	7afb      	ldrb	r3, [r7, #11]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d102      	bne.n	800077e <uart_try_send_from_fifo+0x5e>
            uart_send_async_string("CAN Fail\r\n");
 8000778:	4806      	ldr	r0, [pc, #24]	@ (8000794 <uart_try_send_from_fifo+0x74>)
 800077a:	f7ff ffbb 	bl	80006f4 <uart_send_async_string>
    while (fifo_available() >= CAN_FRAME_SIZE) {
 800077e:	f7ff fecd 	bl	800051c <fifo_available>
 8000782:	4603      	mov	r3, r0
 8000784:	2b07      	cmp	r3, #7
 8000786:	d8cf      	bhi.n	8000728 <uart_try_send_from_fifo+0x8>
    }
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	0800094c 	.word	0x0800094c

08000798 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
    if (USART1_SR & (1 << 5)) {
 800079e:	4b30      	ldr	r3, [pc, #192]	@ (8000860 <USART1_IRQHandler+0xc8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f003 0320 	and.w	r3, r3, #32
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d024      	beq.n	80007f4 <USART1_IRQHandler+0x5c>
        uint8_t byte = USART1_DR;
 80007aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000864 <USART1_IRQHandler+0xcc>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]

        if (!collecting) {
 80007b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000868 <USART1_IRQHandler+0xd0>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d10f      	bne.n	80007da <USART1_IRQHandler+0x42>
            if (byte == START_BYTE) {
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	2b1b      	cmp	r3, #27
 80007be:	d119      	bne.n	80007f4 <USART1_IRQHandler+0x5c>
                collecting = 1;
 80007c0:	4b29      	ldr	r3, [pc, #164]	@ (8000868 <USART1_IRQHandler+0xd0>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
                if (fifo_free_space() > 0) fifo_push(byte);
 80007c6:	f7ff fec5 	bl	8000554 <fifo_free_space>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d011      	beq.n	80007f4 <USART1_IRQHandler+0x5c>
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fec8 	bl	8000568 <fifo_push>
 80007d8:	e00c      	b.n	80007f4 <USART1_IRQHandler+0x5c>
            }
        } else {
            if (fifo_free_space() > 0) {
 80007da:	f7ff febb 	bl	8000554 <fifo_free_space>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d004      	beq.n	80007ee <USART1_IRQHandler+0x56>
                fifo_push(byte);
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff febe 	bl	8000568 <fifo_push>
 80007ec:	e002      	b.n	80007f4 <USART1_IRQHandler+0x5c>
            } else {
                uart_send_async_string("FIFO Overflow\r\n");
 80007ee:	481f      	ldr	r0, [pc, #124]	@ (800086c <USART1_IRQHandler+0xd4>)
 80007f0:	f7ff ff80 	bl	80006f4 <uart_send_async_string>
            }
        }
    }

    if ((USART1_SR & (1 << 7)) && (USART1_CR1 & (1 << 7))) {
 80007f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <USART1_IRQHandler+0xc8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d02b      	beq.n	8000858 <USART1_IRQHandler+0xc0>
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <USART1_IRQHandler+0xd8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000808:	2b00      	cmp	r3, #0
 800080a:	d025      	beq.n	8000858 <USART1_IRQHandler+0xc0>
        if (uart_tx_tail != uart_tx_head) {
 800080c:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <USART1_IRQHandler+0xdc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b29a      	uxth	r2, r3
 8000812:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <USART1_IRQHandler+0xe0>)
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	b29b      	uxth	r3, r3
 8000818:	429a      	cmp	r2, r3
 800081a:	d017      	beq.n	800084c <USART1_IRQHandler+0xb4>
            USART1_DR = uart_tx_buffer[uart_tx_tail];
 800081c:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <USART1_IRQHandler+0xdc>)
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	b29b      	uxth	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	4b15      	ldr	r3, [pc, #84]	@ (800087c <USART1_IRQHandler+0xe4>)
 8000826:	5c9b      	ldrb	r3, [r3, r2]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <USART1_IRQHandler+0xcc>)
 800082c:	601a      	str	r2, [r3, #0]
            uart_tx_tail = (uart_tx_tail + 1) % UART_BUFFER_SIZE;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <USART1_IRQHandler+0xdc>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	b29b      	uxth	r3, r3
 8000834:	3301      	adds	r3, #1
 8000836:	425a      	negs	r2, r3
 8000838:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800083c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000840:	bf58      	it	pl
 8000842:	4253      	negpl	r3, r2
 8000844:	b29a      	uxth	r2, r3
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <USART1_IRQHandler+0xdc>)
 8000848:	801a      	strh	r2, [r3, #0]
        } else {
            USART1_CR1 &= ~(1 << 7);  // Disable TXE
        }
    }
}
 800084a:	e005      	b.n	8000858 <USART1_IRQHandler+0xc0>
            USART1_CR1 &= ~(1 << 7);  // Disable TXE
 800084c:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <USART1_IRQHandler+0xd8>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a07      	ldr	r2, [pc, #28]	@ (8000870 <USART1_IRQHandler+0xd8>)
 8000852:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000856:	6013      	str	r3, [r2, #0]
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40011000 	.word	0x40011000
 8000864:	40011004 	.word	0x40011004
 8000868:	20000124 	.word	0x20000124
 800086c:	08000958 	.word	0x08000958
 8000870:	4001100c 	.word	0x4001100c
 8000874:	2000009e 	.word	0x2000009e
 8000878:	2000009c 	.word	0x2000009c
 800087c:	2000001c 	.word	0x2000001c

08000880 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000880:	480d      	ldr	r0, [pc, #52]	@ (80008b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000882:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000884:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000888:	480c      	ldr	r0, [pc, #48]	@ (80008bc <LoopForever+0x6>)
  ldr r1, =_edata
 800088a:	490d      	ldr	r1, [pc, #52]	@ (80008c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800088c:	4a0d      	ldr	r2, [pc, #52]	@ (80008c4 <LoopForever+0xe>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a0a      	ldr	r2, [pc, #40]	@ (80008c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a0:	4c0a      	ldr	r4, [pc, #40]	@ (80008cc <LoopForever+0x16>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ae:	f000 f811 	bl	80008d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b2:	f7ff fd9f 	bl	80003f4 <main>

080008b6 <LoopForever>:

LoopForever:
  b LoopForever
 80008b6:	e7fe      	b.n	80008b6 <LoopForever>
  ldr   r0, =_estack
 80008b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80008c4:	08000970 	.word	0x08000970
  ldr r2, =_sbss
 80008c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80008cc:	20000128 	.word	0x20000128

080008d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <ADC_IRQHandler>
	...

080008d4 <__libc_init_array>:
 80008d4:	b570      	push	{r4, r5, r6, lr}
 80008d6:	4d0d      	ldr	r5, [pc, #52]	@ (800090c <__libc_init_array+0x38>)
 80008d8:	4c0d      	ldr	r4, [pc, #52]	@ (8000910 <__libc_init_array+0x3c>)
 80008da:	1b64      	subs	r4, r4, r5
 80008dc:	10a4      	asrs	r4, r4, #2
 80008de:	2600      	movs	r6, #0
 80008e0:	42a6      	cmp	r6, r4
 80008e2:	d109      	bne.n	80008f8 <__libc_init_array+0x24>
 80008e4:	4d0b      	ldr	r5, [pc, #44]	@ (8000914 <__libc_init_array+0x40>)
 80008e6:	4c0c      	ldr	r4, [pc, #48]	@ (8000918 <__libc_init_array+0x44>)
 80008e8:	f000 f818 	bl	800091c <_init>
 80008ec:	1b64      	subs	r4, r4, r5
 80008ee:	10a4      	asrs	r4, r4, #2
 80008f0:	2600      	movs	r6, #0
 80008f2:	42a6      	cmp	r6, r4
 80008f4:	d105      	bne.n	8000902 <__libc_init_array+0x2e>
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80008fc:	4798      	blx	r3
 80008fe:	3601      	adds	r6, #1
 8000900:	e7ee      	b.n	80008e0 <__libc_init_array+0xc>
 8000902:	f855 3b04 	ldr.w	r3, [r5], #4
 8000906:	4798      	blx	r3
 8000908:	3601      	adds	r6, #1
 800090a:	e7f2      	b.n	80008f2 <__libc_init_array+0x1e>
 800090c:	08000968 	.word	0x08000968
 8000910:	08000968 	.word	0x08000968
 8000914:	08000968 	.word	0x08000968
 8000918:	0800096c 	.word	0x0800096c

0800091c <_init>:
 800091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091e:	bf00      	nop
 8000920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000922:	bc08      	pop	{r3}
 8000924:	469e      	mov	lr, r3
 8000926:	4770      	bx	lr

08000928 <_fini>:
 8000928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800092a:	bf00      	nop
 800092c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800092e:	bc08      	pop	{r3}
 8000930:	469e      	mov	lr, r3
 8000932:	4770      	bx	lr
